// This file is @generated by prost-build.
/// A request to fetch one or more blobs.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBlobRequest {
    /// The key of the blob to fetch.
    #[prost(bytes = "vec", tag = "1")]
    pub blob_key: ::prost::alloc::vec::Vec<u8>,
}
/// The reply to a GetBlobs request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBlobReply {
    /// The blob requested.
    #[prost(bytes = "vec", tag = "1")]
    pub blob: ::prost::alloc::vec::Vec<u8>,
}
/// Request chunks from blobs stored by this relay.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksRequest {
    /// The chunk requests. Chunks are returned in the same order as they are requested.
    #[prost(message, repeated, tag = "1")]
    pub chunk_requests: ::prost::alloc::vec::Vec<ChunkRequest>,
    /// If this is an authenticated request, this should hold the ID of the operator. If this
    /// is an unauthenticated request, this field should be empty. Relays may choose to reject
    /// unauthenticated requests.
    #[prost(bytes = "vec", tag = "2")]
    pub operator_id: ::prost::alloc::vec::Vec<u8>,
    /// Timestamp of the request in seconds since the Unix epoch. If too far out of sync with the server's clock,
    /// request may be rejected.
    #[prost(uint32, tag = "3")]
    pub timestamp: u32,
    /// If this is an authenticated request, this field will hold a BLS signature by the requester
    /// on the hash of this request. Relays may choose to reject unauthenticated requests.
    ///
    /// The following describes the schema for computing the hash of this request
    /// This algorithm is implemented in golang using relay.auth.HashGetChunksRequest().
    ///
    /// All integers are encoded as unsigned 4 byte big endian values.
    ///
    /// Perform a keccak256 hash on the following data in the following order:
    /// 1. the length of the operator ID in bytes
    /// 2. the operator id
    /// 3. the number of chunk requests
    /// 4. for each chunk request:
    ///     a. if the chunk request is a request by index:
    ///        i.   a one byte ASCII representation of the character "i" (aka Ox69)
    ///        ii.  the length blob key in bytes
    ///        iii. the blob key
    ///        iv.  the start index
    ///        v.   the end index
    ///     b. if the chunk request is a request by range:
    ///        i.   a one byte ASCII representation of the character "r" (aka Ox72)
    ///        ii.  the length of the blob key in bytes
    ///        iii. the blob key
    ///        iv.  each requested chunk index, in order
    /// 5. the timestamp (seconds since the Unix epoch encoded as a 4 byte big endian value)
    #[prost(bytes = "vec", tag = "4")]
    pub operator_signature: ::prost::alloc::vec::Vec<u8>,
}
/// A request for chunks within a specific blob. Each chunk is requested individually by its index.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChunkRequestByIndex {
    /// The blob key.
    #[prost(bytes = "vec", tag = "1")]
    pub blob_key: ::prost::alloc::vec::Vec<u8>,
    /// The index of the chunk within the blob.
    #[prost(uint32, repeated, tag = "2")]
    pub chunk_indices: ::prost::alloc::vec::Vec<u32>,
}
/// A request for chunks within a specific blob. Each chunk is requested a range of indices.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChunkRequestByRange {
    /// The blob key.
    #[prost(bytes = "vec", tag = "1")]
    pub blob_key: ::prost::alloc::vec::Vec<u8>,
    /// The first index to start fetching chunks from.
    #[prost(uint32, tag = "2")]
    pub start_index: u32,
    /// One past the last index to fetch chunks from. Similar semantics to golang slices.
    #[prost(uint32, tag = "3")]
    pub end_index: u32,
}
/// A request for chunks within a specific blob. Requests are fulfilled in all-or-nothing fashion. If any of the
/// requested chunks are not found or are unable to be fetched, the entire request will fail.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChunkRequest {
    #[prost(oneof = "chunk_request::Request", tags = "1, 2")]
    pub request: ::core::option::Option<chunk_request::Request>,
}
/// Nested message and enum types in `ChunkRequest`.
pub mod chunk_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Request {
        /// Request chunks by their individual indices.
        #[prost(message, tag = "1")]
        ByIndex(super::ChunkRequestByIndex),
        /// Request chunks by a range of indices.
        #[prost(message, tag = "2")]
        ByRange(super::ChunkRequestByRange),
    }
}
/// The reply to a GetChunks request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksReply {
    /// The chunks requested. The order of these chunks will be the same as the order of the requested chunks.
    /// data is the raw data of the bundle (i.e. serialized byte array of the frames)
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub data: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
/// Generated client implementations.
pub mod relay_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Relay is a service that provides access to public relay functionality.
    #[derive(Debug, Clone)]
    pub struct RelayClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RelayClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RelayClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RelayClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            RelayClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// GetBlob retrieves a blob stored by the relay.
        pub async fn get_blob(
            &mut self,
            request: impl tonic::IntoRequest<super::GetBlobRequest>,
        ) -> std::result::Result<tonic::Response<super::GetBlobReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/relay.Relay/GetBlob");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("relay.Relay", "GetBlob"));
            self.inner.unary(req, path, codec).await
        }
        /// GetChunks retrieves chunks from blobs stored by the relay.
        pub async fn get_chunks(
            &mut self,
            request: impl tonic::IntoRequest<super::GetChunksRequest>,
        ) -> std::result::Result<tonic::Response<super::GetChunksReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/relay.Relay/GetChunks");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("relay.Relay", "GetChunks"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod relay_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RelayServer.
    #[async_trait]
    pub trait Relay: Send + Sync + 'static {
        /// GetBlob retrieves a blob stored by the relay.
        async fn get_blob(
            &self,
            request: tonic::Request<super::GetBlobRequest>,
        ) -> std::result::Result<tonic::Response<super::GetBlobReply>, tonic::Status>;
        /// GetChunks retrieves chunks from blobs stored by the relay.
        async fn get_chunks(
            &self,
            request: tonic::Request<super::GetChunksRequest>,
        ) -> std::result::Result<tonic::Response<super::GetChunksReply>, tonic::Status>;
    }
    /// Relay is a service that provides access to public relay functionality.
    #[derive(Debug)]
    pub struct RelayServer<T: Relay> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Relay> RelayServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RelayServer<T>
    where
        T: Relay,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/relay.Relay/GetBlob" => {
                    #[allow(non_camel_case_types)]
                    struct GetBlobSvc<T: Relay>(pub Arc<T>);
                    impl<T: Relay> tonic::server::UnaryService<super::GetBlobRequest>
                    for GetBlobSvc<T> {
                        type Response = super::GetBlobReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetBlobRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Relay>::get_blob(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetBlobSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/relay.Relay/GetChunks" => {
                    #[allow(non_camel_case_types)]
                    struct GetChunksSvc<T: Relay>(pub Arc<T>);
                    impl<T: Relay> tonic::server::UnaryService<super::GetChunksRequest>
                    for GetChunksSvc<T> {
                        type Response = super::GetChunksReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetChunksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Relay>::get_chunks(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetChunksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Relay> Clone for RelayServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Relay> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Relay> tonic::server::NamedService for RelayServer<T> {
        const NAME: &'static str = "relay.Relay";
    }
}
