// This file is @generated by prost-build.
/// Request that the Node store a batch of chunks.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreChunksRequest {
    /// batch of blobs to store
    #[prost(message, optional, tag = "1")]
    pub batch: ::core::option::Option<super::common::v2::Batch>,
    /// ID of the disperser that is requesting the storage of the batch.
    #[prost(uint32, tag = "2")]
    pub disperser_id: u32,
    /// Timestamp of the request in seconds since the Unix epoch. If too far out of sync with the server's clock,
    /// request may be rejected.
    #[prost(uint32, tag = "3")]
    pub timestamp: u32,
    /// Signature using the disperser's ECDSA key over keccak hash of the batch. The purpose of this signature
    /// is to prevent hooligans from tricking validators into storing data that they shouldn't be storing.
    ///
    /// Algorithm for computing the hash is as follows. All integer values are serialized in big-endian order (unsigned).
    /// A reference implementation (golang) can be found at
    /// <https://github.com/Layr-Labs/eigenda/blob/master/disperser/auth/request_signing.go>
    ///
    /// 1. digest len(batch.BatchHeader.BatchRoot) (4 bytes, unsigned big endian)
    /// 2. digest batch.BatchHeader.BatchRoot
    /// 3. digest batch.BatchHeader.ReferenceBlockNumber (8 bytes, unsigned big endian)
    /// 4. digest len(batch.BlobCertificates) (4 bytes, unsigned big endian)
    /// 5. for each certificate in batch.BlobCertificates:
    ///    a. digest certificate.BlobHeader.Version (4 bytes, unsigned big endian)
    ///    b. digest len(certificate.BlobHeader.QuorumNumbers) (4 bytes, unsigned big endian)
    ///    c. for each quorum_number in certificate.BlobHeader.QuorumNumbers:
    ///      i. digest quorum_number (4 bytes, unsigned big endian)
    ///    d. digest len(certificate.BlobHeader.Commitment.Commitment) (4 bytes, unsigned big endian)
    ///    e. digest certificate.BlobHeader.Commitment.Commitment
    ///    f  digest len(certificate.BlobHeader.Commitment.LengthCommitment) (4 bytes, unsigned big endian)
    ///    g. digest certificate.BlobHeader.Commitment.LengthCommitment
    ///    h. digest len(certificate.BlobHeader.Commitment.LengthProof) (4 bytes, unsigned big endian)
    ///    i. digest certificate.BlobHeader.Commitment.LengthProof
    ///    j. digest certificate.BlobHeader.Commitment.Length (4 bytes, unsigned big endian)
    ///    k. digest len(certificate.BlobHeader.PaymentHeader.AccountId) (4 bytes, unsigned big endian)
    ///    l. digest certificate.BlobHeader.PaymentHeader.AccountId
    ///    m. digest certificate.BlobHeader.PaymentHeader.Timestamp (4 bytes, signed big endian)
    ///    n  digest len(certificate.BlobHeader.PaymentHeader.CumulativePayment) (4 bytes, unsigned big endian)
    ///    o. digest certificate.BlobHeader.PaymentHeader.CumulativePayment
    ///    p  digest len(certificate.BlobHeader.Signature) (4 bytes, unsigned big endian)
    ///    q. digest certificate.BlobHeader.Signature
    ///    r. digest len(certificate.Relays) (4 bytes, unsigned big endian)
    ///    s. for each relay in certificate.Relays:
    ///      i. digest relay (4 bytes, unsigned big endian)
    /// 6. digest disperserID (4 bytes, unsigned big endian)
    /// 7. digest timestamp (4 bytes, unsigned big endian)
    ///
    /// Note that this signature is not included in the hash for obvious reasons.
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
/// StoreChunksReply is the message type used to respond to a StoreChunks() RPC.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreChunksReply {
    /// The validator's BSL signature signed on the batch header hash.
    #[prost(bytes = "vec", tag = "1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
/// The parameter for the GetChunks() RPC.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksRequest {
    /// The unique identifier for the blob the chunks are being requested for.
    /// The blob_key is the keccak hash of the rlp serialization of the BlobHeader, as computed here:
    /// <https://github.com/Layr-Labs/eigenda/blob/0f14d1c90b86d29c30ff7e92cbadf2762c47f402/core/v2/serialization.go#L30>
    #[prost(bytes = "vec", tag = "1")]
    pub blob_key: ::prost::alloc::vec::Vec<u8>,
    /// Which quorum of the blob to retrieve for (note: a blob can have multiple
    /// quorums and the chunks for different quorums at a Node can be different).
    /// The ID must be in range \[0, 254\].
    #[prost(uint32, tag = "2")]
    pub quorum_id: u32,
}
/// The response to the GetChunks() RPC.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksReply {
    /// All chunks the Node is storing for the requested blob per GetChunksRequest.
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub chunks: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// The format how the above chunks are encoded.
    #[prost(enumeration = "ChunkEncodingFormat", tag = "2")]
    pub chunk_encoding_format: i32,
}
/// The parameter for the GetNodeInfo() RPC.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNodeInfoRequest {}
/// Node info reply
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNodeInfoReply {
    /// The version of the node.
    #[prost(string, tag = "1")]
    pub semver: ::prost::alloc::string::String,
    /// The architecture of the node.
    #[prost(string, tag = "2")]
    pub arch: ::prost::alloc::string::String,
    /// The operating system of the node.
    #[prost(string, tag = "3")]
    pub os: ::prost::alloc::string::String,
    /// The number of CPUs on the node.
    #[prost(uint32, tag = "4")]
    pub num_cpu: u32,
    /// The amount of memory on the node in bytes.
    #[prost(uint64, tag = "5")]
    pub mem_bytes: u64,
}
/// This describes how the chunks returned in GetChunksReply are encoded.
/// Used to facilitate the decoding of chunks.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChunkEncodingFormat {
    /// A valid response should never use this value.
    /// If encountered, the client should treat it as an error.
    Unknown = 0,
    /// A chunk encoded in GNARK has the following format:
    ///
    /// \[KZG proof: 32 bytes\]
    /// \[Coeff 1:   32 bytes\]
    /// \[Coeff 2:   32 bytes\]
    /// ...
    /// \[Coeff n:   32 bytes\]
    ///
    /// The KZG proof is a point on G1 and is serialized with bn254.G1Affine.Bytes().
    /// The coefficients are field elements in bn254 and serialized with fr.Element.Marshal().
    ///
    /// References:
    /// - bn254.G1Affine: github.com/consensys/gnark-crypto/ecc/bn254
    /// - fr.Element: github.com/consensys/gnark-crypto/ecc/bn254/fr
    ///
    /// Golang serialization and deserialization can be found in:
    /// - Frame.SerializeGnark()
    /// - Frame.DeserializeGnark()
    /// Package: github.com/Layr-Labs/eigenda/encoding
    Gnark = 1,
}
impl ChunkEncodingFormat {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ChunkEncodingFormat::Unknown => "UNKNOWN",
            ChunkEncodingFormat::Gnark => "GNARK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "GNARK" => Some(Self::Gnark),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod dispersal_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Dispersal is utilized to disperse chunk data.
    #[derive(Debug, Clone)]
    pub struct DispersalClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl DispersalClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> DispersalClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> DispersalClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            DispersalClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// StoreChunks instructs the validator to store a batch of chunks. This call blocks until the validator
        /// either acquires the chunks or the validator determines that it is unable to acquire the chunks. If
        /// the validator is able to acquire and validate the chunks, it returns a signature over the batch header.
        /// This RPC describes which chunks the validator should store but does not contain that chunk data. The validator
        /// is expected to fetch the chunk data from one of the relays that is in possession of the chunk.
        pub async fn store_chunks(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreChunksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreChunksReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/validator.Dispersal/StoreChunks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("validator.Dispersal", "StoreChunks"));
            self.inner.unary(req, path, codec).await
        }
        /// GetNodeInfo fetches metadata about the node.
        pub async fn get_node_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNodeInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNodeInfoReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/validator.Dispersal/GetNodeInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("validator.Dispersal", "GetNodeInfo"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod retrieval_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Retrieval is utilized to retrieve chunk data.
    #[derive(Debug, Clone)]
    pub struct RetrievalClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RetrievalClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RetrievalClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RetrievalClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            RetrievalClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// GetChunks retrieves the chunks for a blob custodied at the Node. Note that where possible, it is generally
        /// faster to retrieve chunks from the relay service if that service is available.
        pub async fn get_chunks(
            &mut self,
            request: impl tonic::IntoRequest<super::GetChunksRequest>,
        ) -> std::result::Result<tonic::Response<super::GetChunksReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/validator.Retrieval/GetChunks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("validator.Retrieval", "GetChunks"));
            self.inner.unary(req, path, codec).await
        }
        /// Retrieve node info metadata
        pub async fn get_node_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNodeInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNodeInfoReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/validator.Retrieval/GetNodeInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("validator.Retrieval", "GetNodeInfo"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod dispersal_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with DispersalServer.
    #[async_trait]
    pub trait Dispersal: Send + Sync + 'static {
        /// StoreChunks instructs the validator to store a batch of chunks. This call blocks until the validator
        /// either acquires the chunks or the validator determines that it is unable to acquire the chunks. If
        /// the validator is able to acquire and validate the chunks, it returns a signature over the batch header.
        /// This RPC describes which chunks the validator should store but does not contain that chunk data. The validator
        /// is expected to fetch the chunk data from one of the relays that is in possession of the chunk.
        async fn store_chunks(
            &self,
            request: tonic::Request<super::StoreChunksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreChunksReply>,
            tonic::Status,
        >;
        /// GetNodeInfo fetches metadata about the node.
        async fn get_node_info(
            &self,
            request: tonic::Request<super::GetNodeInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNodeInfoReply>,
            tonic::Status,
        >;
    }
    /// Dispersal is utilized to disperse chunk data.
    #[derive(Debug)]
    pub struct DispersalServer<T: Dispersal> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Dispersal> DispersalServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for DispersalServer<T>
    where
        T: Dispersal,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/validator.Dispersal/StoreChunks" => {
                    #[allow(non_camel_case_types)]
                    struct StoreChunksSvc<T: Dispersal>(pub Arc<T>);
                    impl<
                        T: Dispersal,
                    > tonic::server::UnaryService<super::StoreChunksRequest>
                    for StoreChunksSvc<T> {
                        type Response = super::StoreChunksReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StoreChunksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Dispersal>::store_chunks(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StoreChunksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/validator.Dispersal/GetNodeInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetNodeInfoSvc<T: Dispersal>(pub Arc<T>);
                    impl<
                        T: Dispersal,
                    > tonic::server::UnaryService<super::GetNodeInfoRequest>
                    for GetNodeInfoSvc<T> {
                        type Response = super::GetNodeInfoReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetNodeInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Dispersal>::get_node_info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetNodeInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Dispersal> Clone for DispersalServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Dispersal> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Dispersal> tonic::server::NamedService for DispersalServer<T> {
        const NAME: &'static str = "validator.Dispersal";
    }
}
/// Generated server implementations.
pub mod retrieval_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RetrievalServer.
    #[async_trait]
    pub trait Retrieval: Send + Sync + 'static {
        /// GetChunks retrieves the chunks for a blob custodied at the Node. Note that where possible, it is generally
        /// faster to retrieve chunks from the relay service if that service is available.
        async fn get_chunks(
            &self,
            request: tonic::Request<super::GetChunksRequest>,
        ) -> std::result::Result<tonic::Response<super::GetChunksReply>, tonic::Status>;
        /// Retrieve node info metadata
        async fn get_node_info(
            &self,
            request: tonic::Request<super::GetNodeInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNodeInfoReply>,
            tonic::Status,
        >;
    }
    /// Retrieval is utilized to retrieve chunk data.
    #[derive(Debug)]
    pub struct RetrievalServer<T: Retrieval> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Retrieval> RetrievalServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RetrievalServer<T>
    where
        T: Retrieval,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/validator.Retrieval/GetChunks" => {
                    #[allow(non_camel_case_types)]
                    struct GetChunksSvc<T: Retrieval>(pub Arc<T>);
                    impl<
                        T: Retrieval,
                    > tonic::server::UnaryService<super::GetChunksRequest>
                    for GetChunksSvc<T> {
                        type Response = super::GetChunksReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetChunksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Retrieval>::get_chunks(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetChunksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/validator.Retrieval/GetNodeInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetNodeInfoSvc<T: Retrieval>(pub Arc<T>);
                    impl<
                        T: Retrieval,
                    > tonic::server::UnaryService<super::GetNodeInfoRequest>
                    for GetNodeInfoSvc<T> {
                        type Response = super::GetNodeInfoReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetNodeInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Retrieval>::get_node_info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetNodeInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Retrieval> Clone for RetrievalServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Retrieval> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Retrieval> tonic::server::NamedService for RetrievalServer<T> {
        const NAME: &'static str = "validator.Retrieval";
    }
}
