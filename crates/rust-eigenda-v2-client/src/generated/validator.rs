// This file is @generated by prost-build.
/// Request that the Node store a batch of chunks.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreChunksRequest {
    /// batch of blobs to store
    #[prost(message, optional, tag = "1")]
    pub batch: ::core::option::Option<super::common::v2::Batch>,
    /// ID of the disperser that is requesting the storage of the batch.
    #[prost(uint32, tag = "2")]
    pub disperser_id: u32,
    /// Timestamp of the request in seconds since the Unix epoch. If too far out of sync with the server's clock,
    /// request may be rejected.
    #[prost(uint32, tag = "3")]
    pub timestamp: u32,
    /// Signature using the disperser's ECDSA key over keccak hash of the batch. The purpose of this signature
    /// is to prevent hooligans from tricking validators into storing data that they shouldn't be storing.
    ///
    /// Algorithm for computing the hash is as follows. All integer values are serialized in big-endian order (unsigned).
    /// A reference implementation (golang) can be found at
    /// <https://github.com/Layr-Labs/eigenda/blob/master/disperser/auth/request_signing.go>
    ///
    /// 1. digest len(batch.BatchHeader.BatchRoot) (4 bytes, unsigned big endian)
    /// 2. digest batch.BatchHeader.BatchRoot
    /// 3. digest batch.BatchHeader.ReferenceBlockNumber (8 bytes, unsigned big endian)
    /// 4. digest len(batch.BlobCertificates) (4 bytes, unsigned big endian)
    /// 5. for each certificate in batch.BlobCertificates:
    ///    a. digest certificate.BlobHeader.Version (4 bytes, unsigned big endian)
    ///    b. digest len(certificate.BlobHeader.QuorumNumbers) (4 bytes, unsigned big endian)
    ///    c. for each quorum_number in certificate.BlobHeader.QuorumNumbers:
    ///      i. digest quorum_number (4 bytes, unsigned big endian)
    ///    d. digest len(certificate.BlobHeader.Commitment.Commitment) (4 bytes, unsigned big endian)
    ///    e. digest certificate.BlobHeader.Commitment.Commitment
    ///    f  digest len(certificate.BlobHeader.Commitment.LengthCommitment) (4 bytes, unsigned big endian)
    ///    g. digest certificate.BlobHeader.Commitment.LengthCommitment
    ///    h. digest len(certificate.BlobHeader.Commitment.LengthProof) (4 bytes, unsigned big endian)
    ///    i. digest certificate.BlobHeader.Commitment.LengthProof
    ///    j. digest certificate.BlobHeader.Commitment.Length (4 bytes, unsigned big endian)
    ///    k. digest len(certificate.BlobHeader.PaymentHeader.AccountId) (4 bytes, unsigned big endian)
    ///    l. digest certificate.BlobHeader.PaymentHeader.AccountId
    ///    m. digest certificate.BlobHeader.PaymentHeader.Timestamp (4 bytes, signed big endian)
    ///    n  digest len(certificate.BlobHeader.PaymentHeader.CumulativePayment) (4 bytes, unsigned big endian)
    ///    o. digest certificate.BlobHeader.PaymentHeader.CumulativePayment
    ///    p  digest len(certificate.BlobHeader.Signature) (4 bytes, unsigned big endian)
    ///    q. digest certificate.BlobHeader.Signature
    ///    r. digest len(certificate.Relays) (4 bytes, unsigned big endian)
    ///    s. for each relay in certificate.Relays:
    ///      i. digest relay (4 bytes, unsigned big endian)
    /// 6. digest disperserID (4 bytes, unsigned big endian)
    /// 7. digest timestamp (4 bytes, unsigned big endian)
    ///
    /// Note that this signature is not included in the hash for obvious reasons.
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
/// StoreChunksReply is the message type used to respond to a StoreChunks() RPC.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreChunksReply {
    /// The validator's BSL signature signed on the batch header hash.
    #[prost(bytes = "vec", tag = "1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
/// The parameter for the GetChunks() RPC.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksRequest {
    /// The unique identifier for the blob the chunks are being requested for.
    /// The blob_key is the keccak hash of the rlp serialization of the BlobHeader, as computed here:
    /// <https://github.com/Layr-Labs/eigenda/blob/0f14d1c90b86d29c30ff7e92cbadf2762c47f402/core/v2/serialization.go#L30>
    #[prost(bytes = "vec", tag = "1")]
    pub blob_key: ::prost::alloc::vec::Vec<u8>,
    /// Which quorum of the blob to retrieve for (note: a blob can have multiple
    /// quorums and the chunks for different quorums at a Node can be different).
    /// The ID must be in range \[0, 254\].
    #[prost(uint32, tag = "2")]
    pub quorum_id: u32,
}
/// The response to the GetChunks() RPC.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksReply {
    /// All chunks the Node is storing for the requested blob per GetChunksRequest.
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub chunks: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// The format how the above chunks are encoded.
    #[prost(enumeration = "ChunkEncodingFormat", tag = "2")]
    pub chunk_encoding_format: i32,
}
/// The parameter for the GetNodeInfo() RPC.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetNodeInfoRequest {}
/// Node info reply
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNodeInfoReply {
    /// The version of the node.
    #[prost(string, tag = "1")]
    pub semver: ::prost::alloc::string::String,
    /// The architecture of the node.
    #[prost(string, tag = "2")]
    pub arch: ::prost::alloc::string::String,
    /// The operating system of the node.
    #[prost(string, tag = "3")]
    pub os: ::prost::alloc::string::String,
    /// The number of CPUs on the node.
    #[prost(uint32, tag = "4")]
    pub num_cpu: u32,
    /// The amount of memory on the node in bytes.
    #[prost(uint64, tag = "5")]
    pub mem_bytes: u64,
}
/// This describes how the chunks returned in GetChunksReply are encoded.
/// Used to facilitate the decoding of chunks.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChunkEncodingFormat {
    /// A valid response should never use this value.
    /// If encountered, the client should treat it as an error.
    Unknown = 0,
    /// A chunk encoded in GNARK has the following format:
    ///
    /// \[KZG proof: 32 bytes\]
    /// \[Coeff 1:   32 bytes\]
    /// \[Coeff 2:   32 bytes\]
    /// ...
    /// \[Coeff n:   32 bytes\]
    ///
    /// The KZG proof is a point on G1 and is serialized with bn254.G1Affine.Bytes().
    /// The coefficients are field elements in bn254 and serialized with fr.Element.Marshal().
    ///
    /// References:
    /// - bn254.G1Affine: github.com/consensys/gnark-crypto/ecc/bn254
    /// - fr.Element: github.com/consensys/gnark-crypto/ecc/bn254/fr
    ///
    /// Golang serialization and deserialization can be found in:
    /// - Frame.SerializeGnark()
    /// - Frame.DeserializeGnark()
    /// Package: github.com/Layr-Labs/eigenda/encoding
    Gnark = 1,
}
impl ChunkEncodingFormat {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Gnark => "GNARK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "GNARK" => Some(Self::Gnark),
            _ => None,
        }
    }
}
