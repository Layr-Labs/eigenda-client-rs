{"abi":[{"type":"function","name":"checkDACert","inputs":[{"name":"abiEncodedCert","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"status","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"getCertVerifierAt","inputs":[{"name":"referenceBlockNumber","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"checkDACert(bytes)":"9077193b","getCertVerifierAt(uint32)":"4a4ae0e2"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"abiEncodedCert\",\"type\":\"bytes\"}],\"name\":\"checkDACert\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"referenceBlockNumber\",\"type\":\"uint32\"}],\"name\":\"getCertVerifierAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkDACert(bytes)\":{\"params\":{\"abiEncodedCert\":\"The ABI encoded certificate. Any cert verifier should decode this ABI encoding based on the certificate version.\"},\"returns\":{\"status\":\"An enum value. Success is always mapped to 1, and other values are errors specific to each CertVerifier.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkDACert(bytes)\":{\"notice\":\"Check a DA cert's validity\"},\"getCertVerifierAt(uint32)\":{\"notice\":\"Returns the address for the active cert verifier at a given reference block number.         The reference block number must not be in the future.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/periphery/cert/interfaces/IEigenDACertVerifierRouter.sol\":\"IEigenDACertVerifierRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"]},\"sources\":{\"src/periphery/cert/interfaces/IEigenDACertVerifierBase.sol\":{\"keccak256\":\"0x1628e01badc52c4fd4a493982ad2544a0b37a953e2b18271f22164e0393686a7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://16123d00c42c5361da0b757c01c57455727e3d2aa23946a7d70d8c3208ab9f04\",\"dweb:/ipfs/QmRcTG1AZUqYxvUnKUeVG87N5Za2zWznNoAtVmsPDxSiL7\"]},\"src/periphery/cert/interfaces/IEigenDACertVerifierRouter.sol\":{\"keccak256\":\"0xf61de44e94ce0fec3ba34c2603c3b857f33c20ac81ca59bc81d9c6e52714747a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5326be1b3685e20442f033693f0b4f7deb0caa2b7f6b52aebaa059a791f463\",\"dweb:/ipfs/QmU2nC3Xd6JG6nEJVUyJGQWbUVCBdpGpwcNS3tLAVB8DuL\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.12+commit.f00d7308"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"abiEncodedCert","type":"bytes"}],"stateMutability":"view","type":"function","name":"checkDACert","outputs":[{"internalType":"uint8","name":"status","type":"uint8"}]},{"inputs":[{"internalType":"uint32","name":"referenceBlockNumber","type":"uint32"}],"stateMutability":"view","type":"function","name":"getCertVerifierAt","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"checkDACert(bytes)":{"params":{"abiEncodedCert":"The ABI encoded certificate. Any cert verifier should decode this ABI encoding based on the certificate version."},"returns":{"status":"An enum value. Success is always mapped to 1, and other values are errors specific to each CertVerifier."}}},"version":1},"userdoc":{"kind":"user","methods":{"checkDACert(bytes)":{"notice":"Check a DA cert's validity"},"getCertVerifierAt(uint32)":{"notice":"Returns the address for the active cert verifier at a given reference block number.         The reference block number must not be in the future."}},"version":1}},"settings":{"remappings":["@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/","@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","@openzeppelin/=node_modules/@openzeppelin/","ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/","eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/","eigenlayer-middleware/=lib/eigenlayer-middleware/","erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/","zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/periphery/cert/interfaces/IEigenDACertVerifierRouter.sol":"IEigenDACertVerifierRouter"},"evmVersion":"london","libraries":{}},"sources":{"src/periphery/cert/interfaces/IEigenDACertVerifierBase.sol":{"keccak256":"0x1628e01badc52c4fd4a493982ad2544a0b37a953e2b18271f22164e0393686a7","urls":["bzz-raw://16123d00c42c5361da0b757c01c57455727e3d2aa23946a7d70d8c3208ab9f04","dweb:/ipfs/QmRcTG1AZUqYxvUnKUeVG87N5Za2zWznNoAtVmsPDxSiL7"],"license":"MIT"},"src/periphery/cert/interfaces/IEigenDACertVerifierRouter.sol":{"keccak256":"0xf61de44e94ce0fec3ba34c2603c3b857f33c20ac81ca59bc81d9c6e52714747a","urls":["bzz-raw://6c5326be1b3685e20442f033693f0b4f7deb0caa2b7f6b52aebaa059a791f463","dweb:/ipfs/QmU2nC3Xd6JG6nEJVUyJGQWbUVCBdpGpwcNS3tLAVB8DuL"],"license":"MIT"}},"version":1},"id":176}